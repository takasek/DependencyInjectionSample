//
//  Resolver.swift
//  Generated by dikitgen.
//

import DIKit
import UIKit
import Foundation

extension AppResolver {

    func resolveDateRepositoryProtocol() -> DateRepositoryProtocol {
        return provideDateRepository()
    }

    func resolveUseCase(clock: Clock) -> UseCase {
        let dateRepositoryProtocol = resolveDateRepositoryProtocol()
        return UseCase(dependency: .init(dateRepository: dateRepositoryProtocol, clock: clock))
    }

    func resolvePresenter(clock: Clock) -> Presenter {
        let useCase = resolveUseCase(clock: clock)
        return Presenter(dependency: .init(useCase: useCase))
    }

    func resolveViewController(clock: Clock) -> ViewController {
        let presenter = resolvePresenter(clock: clock)
        return ViewController.makeInstance(dependency: .init(presenter: presenter))
    }

}

